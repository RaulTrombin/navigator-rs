name: Test all targets

on: [push, pull_request]

permissions:
  contents: write

jobs:
  # quick-tests:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Repo
  #       uses: actions/checkout@v3

  #     - name: Rust setup
  #       uses: actions-rs/toolchain@v1.0.6
  #       with:
  #         toolchain: nightly
  #         override: true
  #         components: rustfmt, clippy

  #     - name: Rust | Cache
  #       uses: Swatinem/rust-cache@v2

  #     - name: Check Rust formatting
  #       run: cargo fmt -- --check

  #     - name: Check Rust code with Clippy
  #       run: cargo clippy -- -Dwarnings

  #     - name: Run internal tests
  #       run: cargo test --verbose -- --nocapture

  #     - name: Build Rust project
  #       run: cargo build

  #     - name: Build Python module
  #       run: |
  #         pip install --user maturin
  #         pip install . --user
  #     - name: Check Python integration
  #       run: python examples/python/main.py

  #     - name: Check C++ integration
  #       run: |
  #         cd examples/cpp
  #         cmake -B build -DCMAKE_BUILD_TYPE=Debug
  #         cmake --build build --config Debug --parallel
  # #         ./build/example
  # build-cpp:
  #   # needs: [quick-tests]
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - os: ubuntu-latest
  #           TARGET: armv7-unknown-linux-gnueabihf
  #         # - os: ubuntu-latest
  #         #   TARGET: armv7-unknown-linux-musleabihf
  #         # - os: ubuntu-latest
  #         #   TARGET: aarch64-unknown-linux-musl
  #         # - os: ubuntu-latest
  #         #   TARGET: aarch64-unknown-linux-gnu
  #   steps:
  #     - name: Building ${{ matrix.TARGET }}
  #       run: echo "${{ matrix.TARGET }}"

  #     - uses: actions/checkout@master

  #     - name: Rust Setup
  #       uses: actions-rs/toolchain@v1.0.1
  #       with:
  #         toolchain: nightly
  #         target: ${{ matrix.TARGET }}
  #         override: true

  #     - name: Rust Cache
  #       uses: Swatinem/rust-cache@v2

  #     - name: Rust Cross Build Cpp
  #       uses: actions-rs/cargo@v1
  #       with:
  #         use-cross: true
  #         command: build
  #         args: --verbose --release --target=${{ matrix.TARGET }} -Z unstable-options --out-dir output/

  # build-python:
  #   # needs: [quick-tests]
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       target: [armv7] #aarch64
  #       manylinux: [auto] #[musllinux_1_1
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: "3.10"

  #     - name: Build wheels
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         target: ${{ matrix.target }}
  #         args: --release --out dist -i python3.9
  #         sccache: "true"
  #         manylinux: ${{ matrix.manylinux }}

  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: python
  #         path: dist

  # deploy-doc:
  #   needs: quick-tests
  #   if: github.event_name == 'pull_request'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions-rs/toolchain@v1.0.6
  #       with:
  #         toolchain: nightly
  #         override: true
  #         components: rust-docs

  #     - name: Build docs
  #       run: cargo doc

  #     - name: Deploy
  #       uses: peaceiris/actions-gh-pages@v3
  #       if: ${{ github.ref == 'refs/heads/master' }}
  #       with:
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         publish_dir: ./target/doc

  build:
    name: Build
    # needs: [build-python]
    runs-on: self-hosted
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Rust setup
        uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: stable
          override: true

      - name: Rust | Cache
        uses: Swatinem/rust-cache@v2

      - name: Run internal tests
        run: cargo run --example raspberry-pi --verbose -- --nocapture

      - name: Build Rust project
        run: cargo build

      # - name: Download images
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: python
      # path: .
